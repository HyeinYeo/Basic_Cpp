#include <iostream>
using namespace std;

/* 익명 객체 */
/* 
	1. 사용 이유 
		클래스의 멤버로 print() 함수 하나만 가지고 있을 때, 
		이 함수를 사용할 때마다 객체를 생성해야 하는 문제 발생 
	
	2. 특징
		- 익명 객체는 R-value로써 작동
			- 익명객체 생성 -> 멤버 호출 후 실행 끝나자마자 사라짐
			- 리턴값으로 사용 가능 
			 
 */
 
class A
{
public:
	// 생성자
	A(){
		cout << "생성자 호출" << endl; 
	} 
    void print()
    {
        cout << "print() 실행 완료" << endl;
    }
    
    // 소멸자
	~A(){
		cout << "소멸자 호출" << endl;
		cout << endl;
	} 
};

int main()
{	
	/* 익명 객체 필요성 */
	cout << "<익명 객체 필요성>" << endl; 
    A a;
    a.print(); // 번거로움 
    
    A().print(); // 익명 객체로 멤버 함수 호출! 
    
    /* 익명 객체 특징 */ 
    cout << endl;
    cout << "<익명 객체 특징>" << endl; 
    // 두 개의 A().print()는 각자 다른 객체에서 호출된 함수! 
    A().print(); // 익명 객체 A() 생성 -> 생성자가 한번 호출 -> A().print() 실행 완료 -> 익명객체 A() 소멸자 호출 -> 메모리 해제
	A().print(); // 익명 객체 A() 생성 -> 생성자가 한번 호출 -> A().print() 실행 완료 -> 익명객체 A() 소멸자 호출 -> 메모리 해제
	
	// 일반 객체 생성 시에는 같은 객체에서 함수 호출하는 것
	A a_2; // a_2의 생성자 한 번 호출 
	a_2.print();
	a_2.print(); // 둘 다 a_2 객체에서 호출된 것 
	
	
	return 0;
}
